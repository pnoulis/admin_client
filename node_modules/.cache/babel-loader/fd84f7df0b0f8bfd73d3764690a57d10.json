{"ast":null,"code":"export const useStyle = (style, parameters, reducer) => {\n  const states = reducer(parameters);\n  return (filters, localStyle = \"\") => {\n    let classes = style[localStyle] || localStyle;\n    filters.forEach(filter => {\n      if (states[filter]) classes = classes.concat(\" \", style[filter]);\n    });\n    return classes.trim();\n  };\n},\n      // this function is to be used in cases where a tag is passed\n// inline styles\nuseInlineStyle = (parameters, reducer) => {\n  const states = reducer(parameters);\n  return (filters, localStyle = {}) => {\n    let tmp = {},\n        flag = false;\n    filters.forEach(filter => {\n      if (states[filter]) {\n        flag = true;\n        tmp = { ...localStyle,\n          ...localStyle[filter]\n        };\n      }\n    });\n    return flag ? tmp : localStyle;\n  };\n};","map":{"version":3,"sources":["/home/pavlos/Office/projects/new/admin-client/src/lib/hooks/styles.js"],"names":["useStyle","style","parameters","reducer","states","filters","localStyle","classes","forEach","filter","concat","trim","useInlineStyle","tmp","flag"],"mappings":"AAAA,OACA,MACAA,QAAQ,GAAG,CAACC,KAAD,EAAQC,UAAR,EAAoBC,OAApB,KAAgC;AACzC,QAAMC,MAAM,GAAGD,OAAO,CAACD,UAAD,CAAtB;AACA,SAAO,CAACG,OAAD,EAAUC,UAAU,GAAG,EAAvB,KAA8B;AACnC,QAAIC,OAAO,GAAGN,KAAK,CAACK,UAAD,CAAL,IAAqBA,UAAnC;AAEAD,IAAAA,OAAO,CAACG,OAAR,CAAgBC,MAAM,IAAI;AACxB,UAAIL,MAAM,CAACK,MAAD,CAAV,EAAoBF,OAAO,GAAGA,OAAO,CAACG,MAAR,CAAe,GAAf,EAAoBT,KAAK,CAACQ,MAAD,CAAzB,CAAV;AACrB,KAFD;AAGA,WAAOF,OAAO,CAACI,IAAR,EAAP;AACD,GAPD;AAQD,CAXD;AAAA,MAYA;AACA;AACAC,cAAc,GAAG,CAACV,UAAD,EAAaC,OAAb,KAAyB;AACxC,QAAMC,MAAM,GAAGD,OAAO,CAACD,UAAD,CAAtB;AACA,SAAO,CAACG,OAAD,EAAUC,UAAU,GAAG,EAAvB,KAA8B;AACnC,QAAIO,GAAG,GAAG,EAAV;AAAA,QAAcC,IAAI,GAAG,KAArB;AACAT,IAAAA,OAAO,CAACG,OAAR,CAAgBC,MAAM,IAAI;AACxB,UAAIL,MAAM,CAACK,MAAD,CAAV,EAAoB;AAClBK,QAAAA,IAAI,GAAG,IAAP;AACAD,QAAAA,GAAG,GAAG,EAAC,GAAGP,UAAJ;AAAgB,aAAGA,UAAU,CAACG,MAAD;AAA7B,SAAN;AACD;AACF,KALD;AAMA,WAAOK,IAAI,GAAGD,GAAH,GAASP,UAApB;AACD,GATD;AAUD,CA1BD","sourcesContent":["export\nconst\nuseStyle = (style, parameters, reducer) => {\n  const states = reducer(parameters);\n  return (filters, localStyle = \"\") => {\n    let classes = style[localStyle] || localStyle;\n\n    filters.forEach(filter => {\n      if (states[filter]) classes = classes.concat(\" \", style[filter]);\n    });\n    return classes.trim();\n  };\n},\n// this function is to be used in cases where a tag is passed\n// inline styles\nuseInlineStyle = (parameters, reducer) => {\n  const states = reducer(parameters);\n  return (filters, localStyle = {}) => {\n    let tmp = {}, flag = false;\n    filters.forEach(filter => {\n      if (states[filter]) {\n        flag = true;\n        tmp = {...localStyle, ...localStyle[filter]};\n      }\n    });\n    return flag ? tmp : localStyle;\n  };\n};\n"]},"metadata":{},"sourceType":"module"}