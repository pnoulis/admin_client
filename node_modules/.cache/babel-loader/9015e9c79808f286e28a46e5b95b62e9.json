{"ast":null,"code":"var _jsxFileName = \"/home/pavlos/Office/projects/new/admin-client/src/components/Fields/SelectionFields.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useHover, useStyle } from \"lib/hooks\";\nimport { FORM_STORE } from \"lib/stores\";\nimport style from \"./styles/selector_0.module.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  useFormContext\n} = FORM_STORE;\n\nconst styleReducer = params => {\n  let config = {};\n  config.hovered = params.edit && params.hovered;\n  config.selected = params.selected;\n  return config;\n};\n\nfunction Selector({\n  selected,\n  name,\n  children\n}) {\n  _s();\n\n  const {\n    hovered,\n    bindHover\n  } = useHover(),\n        {\n    edit,\n    setForm\n  } = useFormContext(),\n        setStyle = useStyle(style, {\n    edit,\n    selected,\n    hovered\n  }, styleReducer);\n  return /*#__PURE__*/_jsxDEV(\"span\", { ...bindHover,\n    className: setStyle([\"selected\", \"hovered\"], style.selector),\n    onClick: () => edit && setForm(\"setInput\", name, children),\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Selector, \"/V9MJ9tlp3JZGU+5ZC8B8Ix1dmU=\", false, function () {\n  return [useHover, useFormContext, useStyle];\n});\n\n_c = Selector;\n\nfunction isSelected(selected, current) {\n  if (selected instanceof Array) {\n    if (selected.some(selected => selected === current)) return true;\n    return false;\n  }\n\n  if (selected === current) return true;\n  return false;\n}\n\nexport function SelectionField({\n  list,\n  multiple,\n  name,\n  each\n}) {\n  _s2();\n\n  const [asyncList, setAsyncList] = useState([]),\n        {\n    fields\n  } = useFormContext();\n  useEffect(() => {\n    let eventRef;\n\n    if (\"then\" in list) {\n      list.then(r => {\n        eventRef = setTimeout(() => setAsyncList(r), 2000);\n      }).catch(err => console.log(err)).finally(() => () => clearTimeout(eventRef));\n    } else setAsyncList(list);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"article\", {\n    className: style.selectionField,\n    children: asyncList.map((v, i) => /*#__PURE__*/_jsxDEV(Selector, {\n      selected: isSelected(fields[name], v),\n      name: name,\n      children: v\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(SelectionField, \"NL4UvPwnFJ9jAwzIknBu3MSvwUU=\", false, function () {\n  return [useFormContext];\n});\n\n_c2 = SelectionField;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Selector\");\n$RefreshReg$(_c2, \"SelectionField\");","map":{"version":3,"sources":["/home/pavlos/Office/projects/new/admin-client/src/components/Fields/SelectionFields.jsx"],"names":["useState","useEffect","useHover","useStyle","FORM_STORE","style","useFormContext","styleReducer","params","config","hovered","edit","selected","Selector","name","children","bindHover","setForm","setStyle","selector","isSelected","current","Array","some","SelectionField","list","multiple","each","asyncList","setAsyncList","fields","eventRef","then","r","setTimeout","catch","err","console","log","finally","clearTimeout","selectionField","map","v","i"],"mappings":"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","sourcesContent":["import {useState, useEffect} from \"react\";\nimport {useHover, useStyle} from \"lib/hooks\";\nimport {FORM_STORE} from \"lib/stores\";\nimport style from \"./styles/selector_0.module.scss\";\nconst {useFormContext} = FORM_STORE;\n\nconst styleReducer = (params) => {\n  let config = {};\n  config.hovered = params.edit && params.hovered;\n  config.selected = params.selected;\n  return config;\n};\n\nfunction Selector({selected, name, children}) {\n  const\n  {hovered, bindHover} = useHover(),\n  {edit, setForm} = useFormContext(),\n  setStyle = useStyle(style, {edit, selected, hovered}, styleReducer);\n\n  return (\n    <span {...bindHover}\n          className={setStyle([\"selected\", \"hovered\"], style.selector)}\n          onClick={() => edit && setForm(\"setInput\", name, children)}>\n      {children}\n    </span>\n  );\n}\n\nfunction isSelected(selected, current) {\n  if (selected instanceof Array) {\n    if (selected.some(selected => selected === current)) return true;\n    return false;\n  }\n\n  if (selected === current) return true;\n  return false;\n}\n\nexport function SelectionField({list, multiple, name, each}) {\n  const\n  [asyncList, setAsyncList] = useState([]),\n  {fields} = useFormContext();\n\n  useEffect(() => {\n    let eventRef;\n    if (\"then\" in list) {\n      list.then(r => {\n        eventRef = setTimeout(() => setAsyncList(r), 2000);\n      }).catch(err => console.log(err))\n        .finally(() => () => clearTimeout(eventRef));\n    } else setAsyncList(list);\n  }, []);\n\n  return (\n    <article className={style.selectionField}>\n      {asyncList.map((v, i) => (\n        <Selector key={i} selected={isSelected(fields[name], v)} name={name}>\n          {v}\n        </Selector>\n      ))}\n    </article>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}