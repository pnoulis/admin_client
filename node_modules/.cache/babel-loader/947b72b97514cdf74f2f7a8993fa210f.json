{"ast":null,"code":"import validator from \"validator\";\nimport PathConstructor from \"lib/utils/paths\";\nexport { validateInput, reduceFieldErrors };\n\nconst reduceFieldErrors = (fieldErrors, name, input) => !INPUTS[name] ? { ...fieldErrors,\n  [name]: false\n} : { ...fieldErrors,\n  [name]: INPUTS[name](input)\n},\n      validateInput = (name, input) => !INPUTS[name] ? false : INPUTS[name](input),\n      charsAllowedProduct = \"(a-z0-9,.-_:%\\\"')\",\n      INPUTS = {\n  password(password) {\n    const LENGTH_LIMIT = 150,\n          tooLong = `Password exceeds ${LENGTH_LIMIT} characters`,\n          emptyInput = \"Password required, example: Liberty1\",\n          wrongFormat = \"Password must contain at least 1 capital letter and 1 number\";\n    if (!password) return emptyInput;\n    if (password.length > LENGTH_LIMIT) return tooLong;\n    if (!/.*(\\d+.*[A-Z]+.*|[A-Z]+.*\\d+.*)+.*/.test(password)) return wrongFormat;\n    return false;\n  },\n\n  username(username) {\n    const LENGTH_LIMIT = 30,\n          tooLong = `Username exceeds ${LENGTH_LIMIT} characters`,\n          wrongFormat = \"Expected format: (John)\",\n          emptyInput = \"Username required, example: John\";\n    if (!username) return emptyInput;\n    if (username.length > LENGTH_LIMIT) return tooLong;\n    if (!validator.isAlphanumeric(username, [\"en-US\"])) return wrongFormat;\n    return false;\n  },\n\n  email: function (email) {\n    const LENGTH_LIMIT = 150,\n          tooLong = `Email exceeds ${LENGTH_LIMIT} characters`,\n          emptyInput = \"Email required, example: me@gmail.com\",\n          wrongFormat = \"Expected format: (me@gmail.com)\";\n    if (!email) return emptyInput;\n    if (email.length > LENGTH_LIMIT) return tooLong;\n    if (!validator.isEmail(email)) return wrongFormat;\n    return false;\n  },\n  tel: function (number) {\n    const LENGTH_LIMIT = \"30\",\n          tooLong = `Mobile phone exceeds ${LENGTH_LIMIT} characters`,\n          emptyInput = \"Mobile number required, example: 07544945926\",\n          wrongFormat = \"Expected format: (07544945926)\";\n    if (!number) return emptyInput;\n    if (number.length > LENGTH_LIMIT) return tooLong;\n    if (!validator.isNumeric(number)) return wrongFormat;\n    return false;\n  },\n  type: function (type) {\n    const emptyInput = \"Type required!\",\n          wrongFormat = \"Expected format: (John Scot)\";\n    if (!type) return emptyInput;else if (!validator.isAlpha(type, [\"en-US\"], {\n      ignore: \" \"\n    })) return wrongFormat;else return false;\n  },\n  city: function (city) {\n    const LENGTH_LIMIT = 30,\n          tooLong = `City exceeds ${LENGTH_LIMIT} characters`,\n          emptyInput = \"City required, example: New York\",\n          wrongFormat = \"Expected format: (New York)\";\n    if (!city) return emptyInput;\n    if (city.length > LENGTH_LIMIT) return tooLong;\n    if (!validator.isAlpha(city, [\"en-US\"])) return wrongFormat;\n    return false;\n  },\n  region: function (region) {\n    const LENGTH_LIMIT = 50,\n          tooLong = `Region exceeds ${LENGTH_LIMIT} characters`,\n          emptyInput = \"Region required, example: Texas\",\n          wrongFormat = \"Expected format: (Texas)\";\n    if (!region) return emptyInput;\n    if (region.length > LENGTH_LIMIT) return tooLong;\n    if (!validator.isAlpha(region, [\"en-US\"], {\n      ignore: \" \"\n    })) return wrongFormat;\n    return false;\n  },\n  postcode: function (postcode) {\n    const LENGTH_LIMIT = 10,\n          tooLong = `Postcode exceeds ${LENGTH_LIMIT} characters`,\n          emptyInput = \"Postcode required, example: BS16 5SE, 55438, ...\",\n          wrongFormat = \"Expected format: BS16 5SE, 55438, ...\";\n    if (!postcode) return emptyInput;\n    if (postcode.length > LENGTH_LIMIT) return tooLong;\n    if (!validator.isPostalCode(postcode, \"any\")) return wrongFormat;\n    return false;\n  },\n  street: function (street) {\n    const LENGTH_LIMIT = 150,\n          tooLong = `Street field should be less than ${LENGTH_LIMIT} characts`,\n          emptyInput = \"Address line required, example: 10 Downing Street, Westminster\",\n          wrongFormat = \"Expected format: 10 Downing Street, Westminster\";\n    if (!street) return emptyInput;\n    if (street.length > LENGTH_LIMIT) return tooLong;\n    if (/[^a-zA-Z0-9\\s.-_ ]/.test(street)) return wrongFormat;\n    return false;\n  },\n  country: function (country) {\n    const LENGTH_LIMIT = 30,\n          tooLong = `Country exceeds ${LENGTH_LIMIT} characters`,\n          wrongFormat = \"Countries do not use numerals or specials characters\",\n          emptyInput = \"Country required!\";\n    if (!country) return emptyInput;\n    if (country === \"country*\") return emptyInput;\n    if (country.length > LENGTH_LIMIT) return tooLong;\n    if (/[^a-z]/.test(country)) return wrongFormat;\n    return false;\n  },\n  // generic\n  alphaNum: function (string) {\n    const emptyInput = \"One of the fields was left empty!\",\n          wrongFormat = \"Only alphanumeric characters are allowed!\";\n    if (!string) return emptyInput;else if (!validator.isAlphanumeric(string, [\"en-US\"])) return wrongFormat;else return false;\n  },\n  // again generic, usually is send along with alphaNum above,\n  // it is the case where a key and a value must be providde.\n  // the key field is given a name of alphaNum, and the value field\n  // a name of value\n  value: function (string) {\n    const emptyInput = \"One of the fields was left empty!\";\n    if (!string) return emptyInput;else return false;\n  },\n  title: function (string) {\n    const LENGTH_LIMIT = 40,\n          emptyInput = \"The title was left empty!\",\n          tooLong = `The title must be less than ${LENGTH_LIMIT} characters long`,\n          wrongFormat = `Title field is allowed only ${charsAllowedProduct}`;\n    if (!string) return emptyInput;else if (string.length > LENGTH_LIMIT) return tooLong;else if (/[^\\w\\s\\n-,.:%\"']/.test(string)) return wrongFormat;else return false;\n  },\n  description: function (string) {\n    const LENGTH_LIMIT = 200,\n          emptyInput = \"The description was left empty!\",\n          tooLong = `The description must be less than ${LENGTH_LIMIT} characters long!`,\n          wrongFormat = `Description field is allowed only ${charsAllowedProduct}`;\n    if (!string) return emptyInput;else if (string.length > LENGTH_LIMIT) return tooLong;else if (/[^\\w\\s-,.:%\"']/.test(string)) return wrongFormat;else return false;\n  },\n  supplier: function (string) {\n    const OPTIONAL = true,\n          LENGTH_LIMIT = 15,\n          tooLong = `The supplier must be less than ${LENGTH_LIMIT} characters long!`,\n          wrongFormat = `Supplier field is allowed only ${charsAllowedProduct}`;\n    if (!string && OPTIONAL) return false;else if (string.length > LENGTH_LIMIT) return tooLong;else if (/[^\\w\\s-,.:%\"']/.test(string)) return wrongFormat;else return false;\n  },\n  supplierId: function (string) {\n    const OPTIONAL = true,\n          LENGTH_LIMIT = 15,\n          tooLong = `The supplier id must be less than ${LENGTH_LIMIT} characters long!`,\n          wrongFormat = `Supplier id field is allowed only ${charsAllowedProduct}`;\n    if (!string && OPTIONAL) return false;else if (string.length > LENGTH_LIMIT) return tooLong;else if (/[^\\w\\s-,.:%\"']/.test(string)) return wrongFormat;else return false;\n  },\n  tags: function (array) {\n    const emptyInput = \"No tag was selected!\";\n    if (!array.length) return emptyInput;else return false;\n  },\n  units: function (number) {\n    const string = number.toString(),\n          emptyInput = \"Units field is empty!\",\n          wrongFormat = \"Units field is allowed only (0-9.)\";\n    if (!string) return emptyInput;else if (/[^0-9.]/.test(string)) return wrongFormat;else return false;\n  },\n  wpu: function (number) {\n    const string = number.toString(),\n          emptyInput = \"Wpu field is empty!\",\n          wrongFormat = \"Wpu field is allowed only (0-9)\",\n          numberLessThan0 = \"Wpu cannot be less than 0\";\n    console.log(number);\n    if (!string) return emptyInput;else if (/[^0-9]|^0/.test(string)) return wrongFormat;else if (number <= 0) return numberLessThan0;else return false;\n  },\n  ppu: function (number) {\n    const string = number.toString(),\n          emptyInput = \"Ppu field is empty!\",\n          wrongFormat = \"Ppu field is allowed only (0-9.)\";\n    if (!string) return emptyInput;else if (/[^0-9.]/.test(string)) return wrongFormat;else return false;\n  },\n  tp: function (number) {\n    const string = number.toString(),\n          emptyInput = \"Tp Field is empty!\",\n          wrongFormat = \"Tp field is allowed only (0-9.)\";\n    if (!string) return emptyInput;else if (/[^0-9.]/.test(string)) return wrongFormat;else return false;\n  },\n  mu: function (array) {\n    const isEmpty = \"Measuring unit has not been selected\";\n    if (!array.length) return isEmpty;\n    return false;\n  },\n  volume: function (number) {\n    const string = number.toString(),\n          wrongFormat = \"volume field is allowed only (0-9)\";\n    if (/[^0-9]/.test(string)) return wrongFormat;\n    return false;\n  },\n  pu: function (string) {\n    const emptyInput = \"Price units field is empty!\";\n    if (!string) return emptyInput;\n    return false;\n  },\n  stock: function (number) {\n    const OPTIONAL = true,\n          string = number.toString(),\n          emptyInput = \"Stock field is empty!\",\n          wrongFormat = \"Stock field is allowed only (0-9)\";\n    if (!string && OPTIONAL) return false;else if (/[^0-9]/.test(string)) return wrongFormat;else return false;\n  },\n  img: function (img) {\n    if (!(img instanceof File) && Object.keys(img).length) return false;\n    if (!img.name) return \"you forgot to upload an image\";\n\n    const LENGTH_LIMIT = 124,\n          // completely arbitrary\n    ext = PathConstructor.extractExt(img.name),\n          filename = PathConstructor.extractName(img.name),\n          mime = img.type,\n          IMG_FORMATS = [\"image/jpeg\", \"image/png\", \"image/gif\", \"image/webp\", \"image/svg+xml\", \"image/tiff\", \"image/bmp\"],\n          tooLong = `The image name exceeds ${LENGTH_LIMIT} chararcters, please shorten it`,\n          illegalChars = \"Please reformat the image file name to only include characters from\" + \"the set: [a-zA-Z0-9-_.] (no spaces are allowed)\",\n          notAnImg = \"The file you tried to upload is not an img.\" + \"The accepted formats are: (jpg, jpeg), (png), (gif), (webp), (bmp), (svg+xml)\",\n          isImg = function () {\n      let match = false;\n      IMG_FORMATS.forEach(format => {\n        if (format === mime) match = true;\n      });\n      return match;\n    };\n\n    if (filename.length > LENGTH_LIMIT) return tooLong;else if (/[^a-zA-Z0-9-_]/.test(filename)) return illegalChars;else if (!isImg()) return notAnImg;else return false;\n  }\n};","map":{"version":3,"sources":["/home/pavlos/Office/projects/new/admin-client/src/lib/input/validateAdmin.js"],"names":["validator","PathConstructor","validateInput","reduceFieldErrors","fieldErrors","name","input","INPUTS","charsAllowedProduct","password","LENGTH_LIMIT","tooLong","emptyInput","wrongFormat","length","test","username","isAlphanumeric","email","isEmail","tel","number","isNumeric","type","isAlpha","ignore","city","region","postcode","isPostalCode","street","country","alphaNum","string","value","title","description","supplier","OPTIONAL","supplierId","tags","array","units","toString","wpu","numberLessThan0","console","log","ppu","tp","mu","isEmpty","volume","pu","stock","img","File","Object","keys","ext","extractExt","filename","extractName","mime","IMG_FORMATS","illegalChars","notAnImg","isImg","match","forEach","format"],"mappings":"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","sourcesContent":["import validator from \"validator\";\nimport PathConstructor from \"lib/utils/paths\";\n\n\nexport {validateInput, reduceFieldErrors};\n\nconst\nreduceFieldErrors = (fieldErrors, name, input) => !INPUTS[name] ? {...fieldErrors, [name]: false} :\n{...fieldErrors, [name]: INPUTS[name](input)},\nvalidateInput = (name, input) => !INPUTS[name] ? false : INPUTS[name](input),\ncharsAllowedProduct = \"(a-z0-9,.-_:%\\\"')\",\nINPUTS = {\n  password(password) {\n    const\n    LENGTH_LIMIT = 150,\n    tooLong = `Password exceeds ${LENGTH_LIMIT} characters`,\n    emptyInput = \"Password required, example: Liberty1\",\n    wrongFormat = \"Password must contain at least 1 capital letter and 1 number\";\n\n    if (!password) return emptyInput;\n    if (password.length > LENGTH_LIMIT) return tooLong;\n    if (!/.*(\\d+.*[A-Z]+.*|[A-Z]+.*\\d+.*)+.*/.test(password)) return wrongFormat;\n    return false;\n  },\n  username(username) {\n    const\n    LENGTH_LIMIT = 30,\n    tooLong = `Username exceeds ${LENGTH_LIMIT} characters`,\n    wrongFormat = \"Expected format: (John)\",\n    emptyInput = \"Username required, example: John\";\n\n    if (!username) return emptyInput;\n    if (username.length > LENGTH_LIMIT) return tooLong;\n    if (!validator.isAlphanumeric(username, [\"en-US\"])) return wrongFormat;\n    return false;\n  },\n  email: function(email) {\n    const\n    LENGTH_LIMIT = 150,\n    tooLong = `Email exceeds ${LENGTH_LIMIT} characters`,\n    emptyInput = \"Email required, example: me@gmail.com\",\n    wrongFormat = \"Expected format: (me@gmail.com)\";\n\n    if (!email) return emptyInput;\n    if (email.length > LENGTH_LIMIT) return tooLong;\n    if (!validator.isEmail(email)) return wrongFormat;\n    return false;\n  },\n  tel: function(number) {\n    const\n    LENGTH_LIMIT = \"30\",\n    tooLong = `Mobile phone exceeds ${LENGTH_LIMIT} characters`,\n    emptyInput = \"Mobile number required, example: 07544945926\",\n    wrongFormat = \"Expected format: (07544945926)\";\n\n    if (!number) return emptyInput;\n    if (number.length > LENGTH_LIMIT) return tooLong;\n    if (!validator.isNumeric(number)) return wrongFormat;\n    return false;\n  },\n\n  type: function(type) {\n    const\n    emptyInput = \"Type required!\",\n    wrongFormat =  \"Expected format: (John Scot)\";\n\n    if (!type)\n      return emptyInput;\n    else if (!validator.isAlpha(type, [\"en-US\"], {ignore: \" \"}))\n      return wrongFormat;\n    else\n      return false;\n  },\n\n  city: function(city) {\n    const\n    LENGTH_LIMIT = 30,\n    tooLong = `City exceeds ${LENGTH_LIMIT} characters`,\n    emptyInput = \"City required, example: New York\",\n    wrongFormat =  \"Expected format: (New York)\";\n\n    if (!city) return emptyInput;\n    if (city.length > LENGTH_LIMIT) return tooLong;\n    if (!validator.isAlpha(city, [\"en-US\"])) return wrongFormat;\n    return false;\n  },\n\n  region: function(region) {\n    const\n    LENGTH_LIMIT = 50,\n    tooLong = `Region exceeds ${LENGTH_LIMIT} characters`,\n    emptyInput = \"Region required, example: Texas\",\n    wrongFormat = \"Expected format: (Texas)\";\n\n    if (!region) return emptyInput;\n    if (region.length > LENGTH_LIMIT) return tooLong;\n    if (!validator.isAlpha(region, [\"en-US\"], {ignore: \" \"})) return wrongFormat;\n    return false;\n  },\n\n  postcode: function(postcode) {\n    const\n    LENGTH_LIMIT = 10,\n    tooLong = `Postcode exceeds ${LENGTH_LIMIT} characters`,\n    emptyInput = \"Postcode required, example: BS16 5SE, 55438, ...\",\n    wrongFormat = \"Expected format: BS16 5SE, 55438, ...\";\n\n    if (!postcode) return emptyInput;\n    if (postcode.length > LENGTH_LIMIT) return tooLong;\n    if (!validator.isPostalCode(postcode, \"any\")) return wrongFormat;\n    return false;\n  },\n\n  street: function(street) {\n    const\n    LENGTH_LIMIT = 150,\n    tooLong = `Street field should be less than ${LENGTH_LIMIT} characts`,\n    emptyInput = \"Address line required, example: 10 Downing Street, Westminster\",\n    wrongFormat = \"Expected format: 10 Downing Street, Westminster\";\n\n    if (!street) return emptyInput;\n    if (street.length > LENGTH_LIMIT) return tooLong;\n    if (/[^a-zA-Z0-9\\s.-_ ]/.test(street)) return wrongFormat;\n    return false;\n  },\n\n  country: function(country) {\n    const\n    LENGTH_LIMIT = 30,\n    tooLong = `Country exceeds ${LENGTH_LIMIT} characters`,\n    wrongFormat = \"Countries do not use numerals or specials characters\",\n    emptyInput = \"Country required!\";\n\n    if (!country) return emptyInput;\n    if (country === \"country*\") return emptyInput;\n    if (country.length > LENGTH_LIMIT) return tooLong;\n    if (/[^a-z]/.test(country)) return wrongFormat;\n    return false;\n  },\n\n  // generic\n  alphaNum: function(string) {\n    const emptyInput = \"One of the fields was left empty!\",\n          wrongFormat = \"Only alphanumeric characters are allowed!\";\n    if (!string)\n      return emptyInput;\n    else if (!validator.isAlphanumeric(string, [\"en-US\"]))\n      return wrongFormat;\n    else\n      return false;\n  },\n\n  // again generic, usually is send along with alphaNum above,\n  // it is the case where a key and a value must be providde.\n  // the key field is given a name of alphaNum, and the value field\n  // a name of value\n  value: function(string) {\n    const emptyInput = \"One of the fields was left empty!\";\n    if (!string)\n      return emptyInput;\n    else\n      return false;\n  },\n\n  title: function(string) {\n    const LENGTH_LIMIT = 40,\n          emptyInput = \"The title was left empty!\",\n          tooLong = `The title must be less than ${LENGTH_LIMIT} characters long`,\n          wrongFormat = `Title field is allowed only ${charsAllowedProduct}`;\n\n    if (!string)\n      return emptyInput;\n    else if (string.length > LENGTH_LIMIT)\n      return tooLong;\n     else if (/[^\\w\\s\\n-,.:%\"']/.test(string))\n       return wrongFormat;\n    else\n      return false;\n  },\n\n  description: function(string) {\n    const LENGTH_LIMIT = 200,\n          emptyInput = \"The description was left empty!\",\n          tooLong = `The description must be less than ${LENGTH_LIMIT} characters long!`,\n          wrongFormat = `Description field is allowed only ${charsAllowedProduct}`;\n\n    if (!string)\n      return emptyInput;\n    else if (string.length > LENGTH_LIMIT)\n      return tooLong;\n    else if (/[^\\w\\s-,.:%\"']/.test(string))\n      return wrongFormat;\n    else\n      return false;\n  },\n\n  supplier: function(string) {\n    const OPTIONAL = true,\n          LENGTH_LIMIT = 15,\n          tooLong = `The supplier must be less than ${LENGTH_LIMIT} characters long!`,\n          wrongFormat = `Supplier field is allowed only ${charsAllowedProduct}`;\n\n    if (!string && OPTIONAL) return false;\n    else if (string.length > LENGTH_LIMIT) return tooLong;\n    else if (/[^\\w\\s-,.:%\"']/.test(string)) return wrongFormat;\n    else return false;\n  },\n\n  supplierId: function(string) {\n    const OPTIONAL = true,\n          LENGTH_LIMIT = 15,\n          tooLong = `The supplier id must be less than ${LENGTH_LIMIT} characters long!`,\n          wrongFormat = `Supplier id field is allowed only ${charsAllowedProduct}`;\n\n    if (!string && OPTIONAL) return false;\n    else if (string.length > LENGTH_LIMIT) return tooLong;\n    else if (/[^\\w\\s-,.:%\"']/.test(string)) return wrongFormat;\n    else return false;\n  },\n\n  tags: function(array) {\n    const emptyInput = \"No tag was selected!\";\n\n    if (!array.length) return emptyInput;\n    else return false;\n  },\n\n  units: function(number) {\n    const string = number.toString(),\n          emptyInput = \"Units field is empty!\",\n          wrongFormat = \"Units field is allowed only (0-9.)\";\n\n    if (!string) return emptyInput;\n    else if (/[^0-9.]/.test(string)) return wrongFormat;\n    else return false;\n  },\n\n  wpu: function(number) {\n    const string = number.toString(),\n          emptyInput = \"Wpu field is empty!\",\n          wrongFormat = \"Wpu field is allowed only (0-9)\",\n          numberLessThan0 = \"Wpu cannot be less than 0\";\n\n    console.log(number);\n    if (!string) return emptyInput;\n    else if (/[^0-9]|^0/.test(string)) return wrongFormat;\n    else if (number <= 0) return numberLessThan0;\n    else return false;\n  },\n\n  ppu: function(number) {\n    const string = number.toString(),\n          emptyInput = \"Ppu field is empty!\",\n          wrongFormat = \"Ppu field is allowed only (0-9.)\";\n\n    if (!string) return emptyInput;\n    else if (/[^0-9.]/.test(string)) return wrongFormat;\n    else return false;\n  },\n\n  tp: function(number) {\n    const\n    string = number.toString(),\n    emptyInput = \"Tp Field is empty!\",\n    wrongFormat = \"Tp field is allowed only (0-9.)\";\n\n    if (!string) return emptyInput;\n    else if (/[^0-9.]/.test(string)) return wrongFormat;\n    else return false;\n  },\n  mu: function(array) {\n    const\n    isEmpty = \"Measuring unit has not been selected\";\n    if (!array.length) return isEmpty;\n    return false;\n  },\n  volume: function(number) {\n    const\n    string = number.toString(),\n    wrongFormat = \"volume field is allowed only (0-9)\";\n\n    if ((/[^0-9]/.test(string))) return wrongFormat;\n    return false;\n  },\n\n  pu: function(string) {\n    const emptyInput = \"Price units field is empty!\";\n\n    if (!string) return emptyInput;\n    return false;\n  },\n\n  stock: function(number) {\n    const OPTIONAL = true,\n          string = number.toString(),\n          emptyInput = \"Stock field is empty!\",\n          wrongFormat = \"Stock field is allowed only (0-9)\";\n\n    if (!string && OPTIONAL) return false;\n    else if (/[^0-9]/.test(string)) return wrongFormat;\n    else return false;\n  },\n\n  img: function(img) {\n    if (!(img instanceof File) && Object.keys(img).length) return false;\n    if (!img.name) return \"you forgot to upload an image\";\n\n    const LENGTH_LIMIT = 124, // completely arbitrary\n          ext = PathConstructor.extractExt(img.name),\n          filename = PathConstructor.extractName(img.name),\n          mime = img.type,\n          IMG_FORMATS = [\n            \"image/jpeg\",\n            \"image/png\",\n            \"image/gif\",\n            \"image/webp\",\n            \"image/svg+xml\",\n            \"image/tiff\",\n            \"image/bmp\",\n          ],\n          tooLong = `The image name exceeds ${LENGTH_LIMIT} chararcters, please shorten it`,\n          illegalChars = \"Please reformat the image file name to only include characters from\" +\n          \"the set: [a-zA-Z0-9-_.] (no spaces are allowed)\",\n          notAnImg = \"The file you tried to upload is not an img.\" +\n          \"The accepted formats are: (jpg, jpeg), (png), (gif), (webp), (bmp), (svg+xml)\",\n          isImg = function() {\n            let match = false;\n            IMG_FORMATS.forEach(format => {\n              if (format === mime) match = true;\n            });\n            return match;\n          };\n\n    if (filename.length > LENGTH_LIMIT) return tooLong;\n    else if (/[^a-zA-Z0-9-_]/.test(filename)) return illegalChars;\n    else if (!isImg()) return notAnImg;\n    else return false;\n  },\n};\n"]},"metadata":{},"sourceType":"module"}