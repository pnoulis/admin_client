{"ast":null,"code":"import _defineProperty from\"/home/pavlos/Office/projects/new/admin-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/home/pavlos/Office/projects/new/admin-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import validator from\"validator\";import PathConstructor from\"lib/utils/paths\";export{validateInput,reduceFieldErrors};var reduceFieldErrors=function reduceFieldErrors(fieldErrors,name,input){return!INPUTS[name]?_objectSpread(_objectSpread({},fieldErrors),{},_defineProperty({},name,false)):_objectSpread(_objectSpread({},fieldErrors),{},_defineProperty({},name,INPUTS[name](input)));},validateInput=function validateInput(name,input){return!INPUTS[name]?false:INPUTS[name](input);},charsAllowedProduct=\"(a-z0-9,.-_:%\\\"')\",INPUTS={password:function password(_password){var LENGTH_LIMIT=150,tooLong=\"Password exceeds \".concat(LENGTH_LIMIT,\" characters\"),emptyInput=\"Password required, example: Liberty1\",wrongFormat=\"Password must contain at least 1 capital letter and 1 number\";if(!_password)return emptyInput;if(_password.length>LENGTH_LIMIT)return tooLong;if(!/.*(\\d+.*[A-Z]+.*|[A-Z]+.*\\d+.*)+.*/.test(_password))return wrongFormat;return false;},username:function username(_username){var LENGTH_LIMIT=30,tooLong=\"Username exceeds \".concat(LENGTH_LIMIT,\" characters\"),wrongFormat=\"Expected format: (John)\",emptyInput=\"Username required, example: John\";if(!_username)return emptyInput;if(_username.length>LENGTH_LIMIT)return tooLong;if(!validator.isAlphanumeric(_username,[\"en-US\"]))return wrongFormat;return false;},email:function email(_email){var LENGTH_LIMIT=150,tooLong=\"Email exceeds \".concat(LENGTH_LIMIT,\" characters\"),emptyInput=\"Email required, example: me@gmail.com\",wrongFormat=\"Expected format: (me@gmail.com)\";if(!_email)return emptyInput;if(_email.length>LENGTH_LIMIT)return tooLong;if(!validator.isEmail(_email))return wrongFormat;return false;},tel:function tel(number){var LENGTH_LIMIT=\"30\",tooLong=\"Mobile phone exceeds \".concat(LENGTH_LIMIT,\" characters\"),emptyInput=\"Mobile number required, example: 07544945926\",wrongFormat=\"Expected format: (07544945926)\";if(!number)return emptyInput;if(number.length>LENGTH_LIMIT)return tooLong;if(!validator.isNumeric(number))return wrongFormat;return false;},type:function type(_type){var emptyInput=\"Type required!\",wrongFormat=\"Expected format: (John Scot)\";if(!_type)return emptyInput;else if(!validator.isAlpha(_type,[\"en-US\"],{ignore:\" \"}))return wrongFormat;else return false;},city:function city(_city){var LENGTH_LIMIT=30,tooLong=\"City exceeds \".concat(LENGTH_LIMIT,\" characters\"),emptyInput=\"City required, example: New York\",wrongFormat=\"Expected format: (New York)\";if(!_city)return emptyInput;if(_city.length>LENGTH_LIMIT)return tooLong;if(!validator.isAlpha(_city,[\"en-US\"]))return wrongFormat;return false;},region:function region(_region){var LENGTH_LIMIT=50,tooLong=\"Region exceeds \".concat(LENGTH_LIMIT,\" characters\"),emptyInput=\"Region required, example: Texas\",wrongFormat=\"Expected format: (Texas)\";if(!_region)return emptyInput;if(_region.length>LENGTH_LIMIT)return tooLong;if(!validator.isAlpha(_region,[\"en-US\"],{ignore:\" \"}))return wrongFormat;return false;},postcode:function postcode(_postcode){var LENGTH_LIMIT=10,tooLong=\"Postcode exceeds \".concat(LENGTH_LIMIT,\" characters\"),emptyInput=\"Postcode required, example: BS16 5SE, 55438, ...\",wrongFormat=\"Expected format: BS16 5SE, 55438, ...\";if(!_postcode)return emptyInput;if(_postcode.length>LENGTH_LIMIT)return tooLong;if(!validator.isPostalCode(_postcode,\"any\"))return wrongFormat;return false;},street:function street(_street){var LENGTH_LIMIT=150,tooLong=\"Street field should be less than \".concat(LENGTH_LIMIT,\" characts\"),emptyInput=\"Address line required, example: 10 Downing Street, Westminster\",wrongFormat=\"Expected format: 10 Downing Street, Westminster\";if(!_street)return emptyInput;if(_street.length>LENGTH_LIMIT)return tooLong;if(/[^a-zA-Z0-9\\s.-_ ]/.test(_street))return wrongFormat;return false;},country:function country(_country){var LENGTH_LIMIT=30,tooLong=\"Country exceeds \".concat(LENGTH_LIMIT,\" characters\"),wrongFormat=\"Countries do not use numerals or specials characters\",emptyInput=\"Country required!\";if(!_country)return emptyInput;if(_country===\"country*\")return emptyInput;if(_country.length>LENGTH_LIMIT)return tooLong;if(/[^a-z]/.test(_country))return wrongFormat;return false;},// generic\nalphaNum:function alphaNum(string){var emptyInput=\"One of the fields was left empty!\",wrongFormat=\"Only alphanumeric characters are allowed!\";if(!string)return emptyInput;else if(!validator.isAlphanumeric(string,[\"en-US\"]))return wrongFormat;else return false;},// again generic, usually is send along with alphaNum above,\n// it is the case where a key and a value must be providde.\n// the key field is given a name of alphaNum, and the value field\n// a name of value\nvalue:function value(string){var emptyInput=\"One of the fields was left empty!\";if(!string)return emptyInput;else return false;},title:function title(string){var LENGTH_LIMIT=40,emptyInput=\"The title was left empty!\",tooLong=\"The title must be less than \".concat(LENGTH_LIMIT,\" characters long\"),wrongFormat=\"Title field is allowed only \".concat(charsAllowedProduct);if(!string)return emptyInput;else if(string.length>LENGTH_LIMIT)return tooLong;else if(/[^\\w\\s\\n-,.:%\"']/.test(string))return wrongFormat;else return false;},description:function description(string){var LENGTH_LIMIT=200,emptyInput=\"The description was left empty!\",tooLong=\"The description must be less than \".concat(LENGTH_LIMIT,\" characters long!\"),wrongFormat=\"Description field is allowed only \".concat(charsAllowedProduct);if(!string)return emptyInput;else if(string.length>LENGTH_LIMIT)return tooLong;else if(/[^\\w\\s-,.:%\"']/.test(string))return wrongFormat;else return false;},supplier:function supplier(string){var OPTIONAL=true,LENGTH_LIMIT=15,tooLong=\"The supplier must be less than \".concat(LENGTH_LIMIT,\" characters long!\"),wrongFormat=\"Supplier field is allowed only \".concat(charsAllowedProduct);if(!string&&OPTIONAL)return false;else if(string.length>LENGTH_LIMIT)return tooLong;else if(/[^\\w\\s-,.:%\"']/.test(string))return wrongFormat;else return false;},supplierId:function supplierId(string){var OPTIONAL=true,LENGTH_LIMIT=15,tooLong=\"The supplier id must be less than \".concat(LENGTH_LIMIT,\" characters long!\"),wrongFormat=\"Supplier id field is allowed only \".concat(charsAllowedProduct);if(!string&&OPTIONAL)return false;else if(string.length>LENGTH_LIMIT)return tooLong;else if(/[^\\w\\s-,.:%\"']/.test(string))return wrongFormat;else return false;},tags:function tags(array){var emptyInput=\"No tag was selected!\";if(!array.length)return emptyInput;else return false;},units:function units(number){var string=number.toString(),emptyInput=\"Units field is empty!\",wrongFormat=\"Units field is allowed only (0-9.)\";if(!string)return emptyInput;else if(/[^0-9.]/.test(string))return wrongFormat;else return false;},wpu:function wpu(number){var string=number.toString(),emptyInput=\"Wpu field is empty!\",wrongFormat=\"Wpu field is allowed only (0-9)\",numberLessThan0=\"Wpu cannot be less than 0\";console.log(number);if(!string)return emptyInput;else if(/[^0-9]|^0/.test(string))return wrongFormat;else if(number<=0)return numberLessThan0;else return false;},ppu:function ppu(number){var string=number.toString(),emptyInput=\"Ppu field is empty!\",wrongFormat=\"Ppu field is allowed only (0-9.)\";if(!string)return emptyInput;else if(/[^0-9.]/.test(string))return wrongFormat;else return false;},tp:function tp(number){var string=number.toString(),emptyInput=\"Tp Field is empty!\",wrongFormat=\"Tp field is allowed only (0-9.)\";if(!string)return emptyInput;else if(/[^0-9.]/.test(string))return wrongFormat;else return false;},mu:function mu(array){var isEmpty=\"Measuring unit has not been selected\";if(!array.length)return isEmpty;return false;},volume:function volume(number){var string=number.toString(),wrongFormat=\"volume field is allowed only (0-9)\";if(/[^0-9]/.test(string))return wrongFormat;return false;},pu:function pu(string){var emptyInput=\"Price units field is empty!\";if(!string)return emptyInput;return false;},stock:function stock(number){var OPTIONAL=true,string=number.toString(),emptyInput=\"Stock field is empty!\",wrongFormat=\"Stock field is allowed only (0-9)\";if(!string&&OPTIONAL)return false;else if(/[^0-9]/.test(string))return wrongFormat;else return false;},img:function img(_img){if(!(_img instanceof File)&&Object.keys(_img).length)return false;if(!_img.name)return\"you forgot to upload an image\";var LENGTH_LIMIT=124,// completely arbitrary\next=PathConstructor.extractExt(_img.name),filename=PathConstructor.extractName(_img.name),mime=_img.type,IMG_FORMATS=[\"image/jpeg\",\"image/png\",\"image/gif\",\"image/webp\",\"image/svg+xml\",\"image/tiff\",\"image/bmp\"],tooLong=\"The image name exceeds \".concat(LENGTH_LIMIT,\" chararcters, please shorten it\"),illegalChars=\"Please reformat the image file name to only include characters from\"+\"the set: [a-zA-Z0-9-_.] (no spaces are allowed)\",notAnImg=\"The file you tried to upload is not an img.\"+\"The accepted formats are: (jpg, jpeg), (png), (gif), (webp), (bmp), (svg+xml)\",isImg=function isImg(){var match=false;IMG_FORMATS.forEach(function(format){if(format===mime)match=true;});return match;};if(filename.length>LENGTH_LIMIT)return tooLong;else if(/[^a-zA-Z0-9-_]/.test(filename))return illegalChars;else if(!isImg())return notAnImg;else return false;}};","map":{"version":3,"sources":["/home/pavlos/Office/projects/new/admin-client/src/lib/input/validateAdmin.js"],"names":["validator","PathConstructor","validateInput","reduceFieldErrors","fieldErrors","name","input","INPUTS","charsAllowedProduct","password","LENGTH_LIMIT","tooLong","emptyInput","wrongFormat","length","test","username","isAlphanumeric","email","isEmail","tel","number","isNumeric","type","isAlpha","ignore","city","region","postcode","isPostalCode","street","country","alphaNum","string","value","title","description","supplier","OPTIONAL","supplierId","tags","array","units","toString","wpu","numberLessThan0","console","log","ppu","tp","mu","isEmpty","volume","pu","stock","img","File","Object","keys","ext","extractExt","filename","extractName","mime","IMG_FORMATS","illegalChars","notAnImg","isImg","match","forEach","format"],"mappings":"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","sourcesContent":["import validator from \"validator\";\nimport PathConstructor from \"lib/utils/paths\";\n\n\nexport {validateInput, reduceFieldErrors};\n\nconst\nreduceFieldErrors = (fieldErrors, name, input) => !INPUTS[name] ? {...fieldErrors, [name]: false} :\n{...fieldErrors, [name]: INPUTS[name](input)},\nvalidateInput = (name, input) => !INPUTS[name] ? false : INPUTS[name](input),\ncharsAllowedProduct = \"(a-z0-9,.-_:%\\\"')\",\nINPUTS = {\n  password(password) {\n    const\n    LENGTH_LIMIT = 150,\n    tooLong = `Password exceeds ${LENGTH_LIMIT} characters`,\n    emptyInput = \"Password required, example: Liberty1\",\n    wrongFormat = \"Password must contain at least 1 capital letter and 1 number\";\n\n    if (!password) return emptyInput;\n    if (password.length > LENGTH_LIMIT) return tooLong;\n    if (!/.*(\\d+.*[A-Z]+.*|[A-Z]+.*\\d+.*)+.*/.test(password)) return wrongFormat;\n    return false;\n  },\n  username(username) {\n    const\n    LENGTH_LIMIT = 30,\n    tooLong = `Username exceeds ${LENGTH_LIMIT} characters`,\n    wrongFormat = \"Expected format: (John)\",\n    emptyInput = \"Username required, example: John\";\n\n    if (!username) return emptyInput;\n    if (username.length > LENGTH_LIMIT) return tooLong;\n    if (!validator.isAlphanumeric(username, [\"en-US\"])) return wrongFormat;\n    return false;\n  },\n  email: function(email) {\n    const\n    LENGTH_LIMIT = 150,\n    tooLong = `Email exceeds ${LENGTH_LIMIT} characters`,\n    emptyInput = \"Email required, example: me@gmail.com\",\n    wrongFormat = \"Expected format: (me@gmail.com)\";\n\n    if (!email) return emptyInput;\n    if (email.length > LENGTH_LIMIT) return tooLong;\n    if (!validator.isEmail(email)) return wrongFormat;\n    return false;\n  },\n  tel: function(number) {\n    const\n    LENGTH_LIMIT = \"30\",\n    tooLong = `Mobile phone exceeds ${LENGTH_LIMIT} characters`,\n    emptyInput = \"Mobile number required, example: 07544945926\",\n    wrongFormat = \"Expected format: (07544945926)\";\n\n    if (!number) return emptyInput;\n    if (number.length > LENGTH_LIMIT) return tooLong;\n    if (!validator.isNumeric(number)) return wrongFormat;\n    return false;\n  },\n\n  type: function(type) {\n    const\n    emptyInput = \"Type required!\",\n    wrongFormat =  \"Expected format: (John Scot)\";\n\n    if (!type)\n      return emptyInput;\n    else if (!validator.isAlpha(type, [\"en-US\"], {ignore: \" \"}))\n      return wrongFormat;\n    else\n      return false;\n  },\n\n  city: function(city) {\n    const\n    LENGTH_LIMIT = 30,\n    tooLong = `City exceeds ${LENGTH_LIMIT} characters`,\n    emptyInput = \"City required, example: New York\",\n    wrongFormat =  \"Expected format: (New York)\";\n\n    if (!city) return emptyInput;\n    if (city.length > LENGTH_LIMIT) return tooLong;\n    if (!validator.isAlpha(city, [\"en-US\"])) return wrongFormat;\n    return false;\n  },\n\n  region: function(region) {\n    const\n    LENGTH_LIMIT = 50,\n    tooLong = `Region exceeds ${LENGTH_LIMIT} characters`,\n    emptyInput = \"Region required, example: Texas\",\n    wrongFormat = \"Expected format: (Texas)\";\n\n    if (!region) return emptyInput;\n    if (region.length > LENGTH_LIMIT) return tooLong;\n    if (!validator.isAlpha(region, [\"en-US\"], {ignore: \" \"})) return wrongFormat;\n    return false;\n  },\n\n  postcode: function(postcode) {\n    const\n    LENGTH_LIMIT = 10,\n    tooLong = `Postcode exceeds ${LENGTH_LIMIT} characters`,\n    emptyInput = \"Postcode required, example: BS16 5SE, 55438, ...\",\n    wrongFormat = \"Expected format: BS16 5SE, 55438, ...\";\n\n    if (!postcode) return emptyInput;\n    if (postcode.length > LENGTH_LIMIT) return tooLong;\n    if (!validator.isPostalCode(postcode, \"any\")) return wrongFormat;\n    return false;\n  },\n\n  street: function(street) {\n    const\n    LENGTH_LIMIT = 150,\n    tooLong = `Street field should be less than ${LENGTH_LIMIT} characts`,\n    emptyInput = \"Address line required, example: 10 Downing Street, Westminster\",\n    wrongFormat = \"Expected format: 10 Downing Street, Westminster\";\n\n    if (!street) return emptyInput;\n    if (street.length > LENGTH_LIMIT) return tooLong;\n    if (/[^a-zA-Z0-9\\s.-_ ]/.test(street)) return wrongFormat;\n    return false;\n  },\n\n  country: function(country) {\n    const\n    LENGTH_LIMIT = 30,\n    tooLong = `Country exceeds ${LENGTH_LIMIT} characters`,\n    wrongFormat = \"Countries do not use numerals or specials characters\",\n    emptyInput = \"Country required!\";\n\n    if (!country) return emptyInput;\n    if (country === \"country*\") return emptyInput;\n    if (country.length > LENGTH_LIMIT) return tooLong;\n    if (/[^a-z]/.test(country)) return wrongFormat;\n    return false;\n  },\n\n  // generic\n  alphaNum: function(string) {\n    const emptyInput = \"One of the fields was left empty!\",\n          wrongFormat = \"Only alphanumeric characters are allowed!\";\n    if (!string)\n      return emptyInput;\n    else if (!validator.isAlphanumeric(string, [\"en-US\"]))\n      return wrongFormat;\n    else\n      return false;\n  },\n\n  // again generic, usually is send along with alphaNum above,\n  // it is the case where a key and a value must be providde.\n  // the key field is given a name of alphaNum, and the value field\n  // a name of value\n  value: function(string) {\n    const emptyInput = \"One of the fields was left empty!\";\n    if (!string)\n      return emptyInput;\n    else\n      return false;\n  },\n\n  title: function(string) {\n    const LENGTH_LIMIT = 40,\n          emptyInput = \"The title was left empty!\",\n          tooLong = `The title must be less than ${LENGTH_LIMIT} characters long`,\n          wrongFormat = `Title field is allowed only ${charsAllowedProduct}`;\n\n    if (!string)\n      return emptyInput;\n    else if (string.length > LENGTH_LIMIT)\n      return tooLong;\n     else if (/[^\\w\\s\\n-,.:%\"']/.test(string))\n       return wrongFormat;\n    else\n      return false;\n  },\n\n  description: function(string) {\n    const LENGTH_LIMIT = 200,\n          emptyInput = \"The description was left empty!\",\n          tooLong = `The description must be less than ${LENGTH_LIMIT} characters long!`,\n          wrongFormat = `Description field is allowed only ${charsAllowedProduct}`;\n\n    if (!string)\n      return emptyInput;\n    else if (string.length > LENGTH_LIMIT)\n      return tooLong;\n    else if (/[^\\w\\s-,.:%\"']/.test(string))\n      return wrongFormat;\n    else\n      return false;\n  },\n\n  supplier: function(string) {\n    const OPTIONAL = true,\n          LENGTH_LIMIT = 15,\n          tooLong = `The supplier must be less than ${LENGTH_LIMIT} characters long!`,\n          wrongFormat = `Supplier field is allowed only ${charsAllowedProduct}`;\n\n    if (!string && OPTIONAL) return false;\n    else if (string.length > LENGTH_LIMIT) return tooLong;\n    else if (/[^\\w\\s-,.:%\"']/.test(string)) return wrongFormat;\n    else return false;\n  },\n\n  supplierId: function(string) {\n    const OPTIONAL = true,\n          LENGTH_LIMIT = 15,\n          tooLong = `The supplier id must be less than ${LENGTH_LIMIT} characters long!`,\n          wrongFormat = `Supplier id field is allowed only ${charsAllowedProduct}`;\n\n    if (!string && OPTIONAL) return false;\n    else if (string.length > LENGTH_LIMIT) return tooLong;\n    else if (/[^\\w\\s-,.:%\"']/.test(string)) return wrongFormat;\n    else return false;\n  },\n\n  tags: function(array) {\n    const emptyInput = \"No tag was selected!\";\n\n    if (!array.length) return emptyInput;\n    else return false;\n  },\n\n  units: function(number) {\n    const string = number.toString(),\n          emptyInput = \"Units field is empty!\",\n          wrongFormat = \"Units field is allowed only (0-9.)\";\n\n    if (!string) return emptyInput;\n    else if (/[^0-9.]/.test(string)) return wrongFormat;\n    else return false;\n  },\n\n  wpu: function(number) {\n    const string = number.toString(),\n          emptyInput = \"Wpu field is empty!\",\n          wrongFormat = \"Wpu field is allowed only (0-9)\",\n          numberLessThan0 = \"Wpu cannot be less than 0\";\n\n    console.log(number);\n    if (!string) return emptyInput;\n    else if (/[^0-9]|^0/.test(string)) return wrongFormat;\n    else if (number <= 0) return numberLessThan0;\n    else return false;\n  },\n\n  ppu: function(number) {\n    const string = number.toString(),\n          emptyInput = \"Ppu field is empty!\",\n          wrongFormat = \"Ppu field is allowed only (0-9.)\";\n\n    if (!string) return emptyInput;\n    else if (/[^0-9.]/.test(string)) return wrongFormat;\n    else return false;\n  },\n\n  tp: function(number) {\n    const\n    string = number.toString(),\n    emptyInput = \"Tp Field is empty!\",\n    wrongFormat = \"Tp field is allowed only (0-9.)\";\n\n    if (!string) return emptyInput;\n    else if (/[^0-9.]/.test(string)) return wrongFormat;\n    else return false;\n  },\n  mu: function(array) {\n    const\n    isEmpty = \"Measuring unit has not been selected\";\n    if (!array.length) return isEmpty;\n    return false;\n  },\n  volume: function(number) {\n    const\n    string = number.toString(),\n    wrongFormat = \"volume field is allowed only (0-9)\";\n\n    if ((/[^0-9]/.test(string))) return wrongFormat;\n    return false;\n  },\n\n  pu: function(string) {\n    const emptyInput = \"Price units field is empty!\";\n\n    if (!string) return emptyInput;\n    return false;\n  },\n\n  stock: function(number) {\n    const OPTIONAL = true,\n          string = number.toString(),\n          emptyInput = \"Stock field is empty!\",\n          wrongFormat = \"Stock field is allowed only (0-9)\";\n\n    if (!string && OPTIONAL) return false;\n    else if (/[^0-9]/.test(string)) return wrongFormat;\n    else return false;\n  },\n\n  img: function(img) {\n    if (!(img instanceof File) && Object.keys(img).length) return false;\n    if (!img.name) return \"you forgot to upload an image\";\n\n    const LENGTH_LIMIT = 124, // completely arbitrary\n          ext = PathConstructor.extractExt(img.name),\n          filename = PathConstructor.extractName(img.name),\n          mime = img.type,\n          IMG_FORMATS = [\n            \"image/jpeg\",\n            \"image/png\",\n            \"image/gif\",\n            \"image/webp\",\n            \"image/svg+xml\",\n            \"image/tiff\",\n            \"image/bmp\",\n          ],\n          tooLong = `The image name exceeds ${LENGTH_LIMIT} chararcters, please shorten it`,\n          illegalChars = \"Please reformat the image file name to only include characters from\" +\n          \"the set: [a-zA-Z0-9-_.] (no spaces are allowed)\",\n          notAnImg = \"The file you tried to upload is not an img.\" +\n          \"The accepted formats are: (jpg, jpeg), (png), (gif), (webp), (bmp), (svg+xml)\",\n          isImg = function() {\n            let match = false;\n            IMG_FORMATS.forEach(format => {\n              if (format === mime) match = true;\n            });\n            return match;\n          };\n\n    if (filename.length > LENGTH_LIMIT) return tooLong;\n    else if (/[^a-zA-Z0-9-_]/.test(filename)) return illegalChars;\n    else if (!isImg()) return notAnImg;\n    else return false;\n  },\n};\n"]},"metadata":{},"sourceType":"module"}